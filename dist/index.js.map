{"version":3,"sources":["model/ModelType.ts","utils.ts","model/Field.ts","mysql-table-define-explain.ts","index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"..\\src","sourcesContent":["import { Field } from \"./Field\";\r\nexport class ModelType {\r\n    /** 根据表名转换的类型名称 `fs_user` -> `FsUser` */\r\n    typeName: string\r\n    /**  根据表名转换类型名称连字符模式 `fs_demo_table_string` -> `fs-demo-table-string` */\r\n    typeNameWithHyphen: string\r\n    /** 所有表字段 */\r\n    fields: Field[]\r\n    /** 目前和typeName一致 */\r\n    realType: string\r\n    /** 表名 */\r\n    tableName?: string\r\n    /** 主键名称 */\r\n    primaryKey?: string\r\n    /** 表备注 */\r\n    typeRemark?: string\r\n    constructor(typeName: string, fields: Field[] = []) {\r\n        this.typeName = typeName\r\n        this.realType = this.typeName\r\n        this.fields = fields\r\n    }\r\n}\r\n","export function javaTypeToJavaScript(type: string) {\r\n    const javaTypeMap = {\r\n        'integer': 'number',\r\n        'array': '[]',\r\n        'varchar': 'string',\r\n        'bigint': 'number',\r\n        'longtext': 'string',\r\n        'datetime': 'number',\r\n        'int': 'number',\r\n        'tinyint': 'number',\r\n        'decimal': 'number',\r\n        'double': 'number',\r\n        'smallint': 'number',\r\n        'bit': 'number',\r\n        'timestamp': 'number',\r\n        'text': 'string',\r\n        'char': 'string',\r\n        'blob': 'number',\r\n        'float': 'number',\r\n        'time': 'number',\r\n        'date': 'number',\r\n    }\r\n    return javaTypeMap[type] || 'string'\r\n}\r\n","import { javaTypeToJavaScript } from '../utils';\r\n\r\nexport class Field {\r\n    /** 字段名驼峰 test_field -> testField */\r\n    name: string\r\n    /** 字段类型(经过转换的javascript类型) */\r\n    type: string\r\n    /** 原始数据库类型 */\r\n    rawType: string\r\n    /** 字段备注 */\r\n    remark?: string\r\n    constructor(name: string, type: string, remark?: string) {\r\n        this.name = name\r\n        this.rawType = type\r\n        this.type = javaTypeToJavaScript(type)\r\n        this.remark = remark\r\n    }\r\n\r\n}\r\n","import { ModelType } from \"./model/ModelType\"\r\nimport { Field } from './model/Field'\r\nimport DataSourceConfig from \"./model/DataSourceConfig\"\r\nimport mysql, { RowDataPacket } from 'mysql'\r\nimport Connection = require(\"mysql/lib/Connection\")\r\n\r\ninterface TableInfoEntity {\r\n    tableName: string\r\n    tableRemark: string\r\n    primaryKey: string\r\n    fields: {key: string, type: string, remark: string}[]\r\n}\r\nlet connection: Connection\r\nasync function getTableDefine(tableName: string, dbConfig: DataSourceConfig) {\r\n    if (!connection) {\r\n        connection = mysql.createConnection(dbConfig)\r\n        connection.connect()\r\n    }\r\n    const p1 = executeQuery(`select table_name, table_comment from information_schema.tables where table_schema = ? and table_name = ? `, [dbConfig.database, tableName])\r\n    const p2 = executeQuery(`SELECT COLUMN_NAME, DATA_TYPE, COLUMN_COMMENT FROM information_schema.COLUMNS WHERE table_schema = ? AND table_name = ? ORDER BY ORDINAL_POSITION`, [dbConfig.database, tableName])\r\n    const p3 = executeQuery(`SELECT COLUMN_NAME FROM information_schema.KEY_COLUMN_USAGE WHERE table_schema = ? AND table_name = ? AND constraint_name = 'PRIMARY'`, [dbConfig.database, tableName])\r\n    const [tableDefine, columnDefine, primaryDefine] = await Promise.all([p1, p2, p3])\r\n    if (tableDefine.length === 0) {\r\n        throw `table ${tableName} no found`\r\n    }\r\n    const table = tableDefine[0]\r\n    \r\n    return {\r\n        tableName: table['TABLE_NAME'],\r\n        tableRemark: table['TABLE_COMMENT'],\r\n        primaryKey: primaryDefine[0]['COLUMN_NAME'],\r\n        fields: columnDefine.map(data => {\r\n            return {\r\n                key: data['COLUMN_NAME'],\r\n                type: data['DATA_TYPE'],\r\n                remark: data['COLUMN_COMMENT']\r\n            }\r\n        })\r\n    } as TableInfoEntity\r\n}\r\n\r\nasync function executeQuery(query: string, data: any[]): Promise<RowDataPacket[]> {\r\n    return new Promise((resolve) => {\r\n        connection.query<RowDataPacket[]>(query, data, (e, result) => {\r\n            resolve(result)\r\n        })\r\n    }) \r\n}\r\n\r\nfunction toCamelCase(source: string, split = '_') {\r\n    let array = source.split(split)\r\n    let output = array.map(m => m.substr(0, 1).toUpperCase() + m.substr(1)).join('')\r\n    return output\r\n}\r\n\r\nfunction fieldNameParse(source: string) {\r\n    return source.replace(/\\_(\\w)/g, (all, letter) => {\r\n        return letter.toUpperCase()\r\n    })\r\n}\r\n\r\n/**\r\n * 将表结构解析为 ModelType对象\r\n */\r\nexport default async (params: string[], dbConfig: DataSourceConfig): Promise<ModelType[]> => {\r\n    try {\r\n        const modelTypeList = []\r\n        for(let i = 0; i < params.length; i++) {\r\n            const table = params[i]\r\n            const data = await getTableDefine(table, dbConfig)\r\n            const modelName = toCamelCase(table)\r\n            const modelType = new ModelType(modelName, data.fields.map(field => {\r\n                return new Field(fieldNameParse(field.key), field.type, field.remark)\r\n            }))\r\n            modelType.typeRemark = data.tableRemark\r\n            modelType.tableName = table\r\n            modelType.typeNameWithHyphen = table.replace(/_/g, '-').toLocaleLowerCase()\r\n            modelType.primaryKey = data.primaryKey\r\n            modelTypeList.push(modelType)\r\n        }\r\n        return modelTypeList\r\n    } finally {\r\n        connection.end()\r\n    }\r\n}","#!/usr/bin/env node\n\nimport fs from 'fs'\nimport ejs from 'ejs'\nimport path from 'path'\nimport TableDefineExplain from './mysql-table-define-explain'\nimport DataSourceConfig from './model/DataSourceConfig'\nimport Setting from './model/Setting'\n\ninterface CodeGenConfig {\n    profile: {key: CodeGenConfig}\n    datasource: DataSourceConfig\n}\n\nconst CONFIG_DIR = resolve('.fast-codegen')\n\nfunction resolve(dir: string) {\n    return path.join(process.cwd(), dir)\n}\n\nfunction mkdirs(dirname: string, callback: () => void){\n    fs.exists(dirname, exists => {\n        if(exists){\n            callback()\n        }else{\n            mkdirs(path.dirname(dirname), () => {\n                fs.mkdir(dirname, callback)\n            })\n        }\n    })\n}\n/**\n *\n * @param target 目标目录\n * @param content 内容\n */\nfunction writeFile(target: string , content: string) {\n    let setting = {} as Setting\n    if (target.indexOf('?') > -1) {\n        const targetWithOption = target.split('?')\n        target = targetWithOption[0]\n        setting = queryToObject(targetWithOption[1])\n    }\n    target = resolve(target)\n\n\n    const dirPath = target.substring(0, target.lastIndexOf('\\\\'))\n    mkdirs(dirPath, () => {\n        if (setting.mode) {\n            switch(setting.mode) {\n                case 'append':\n                    appendFileToTarget(target, content)\n                    break\n                case 'overwrite':\n                    if (fs.existsSync(target)) {\n                        fs.unlinkSync(target)\n                    }\n                    writeFileToTarget(target, content)\n                    break\n                default:\n                    const unknowSetting = setting.mode as never\n                    console.log('unkonwe setting mode', unknowSetting)\n                    break\n            }\n        } else {\n            if (fs.existsSync(target)) {\n                console.error(target, ' already exists')\n            } else {\n                writeFileToTarget(target, content)\n            }\n        }\n    })\n}\n\nfunction writeFileToTarget(target: string, content: string) {\n    fs.writeFile(target, content, (err) => {\n        if (err) {\n            console.log('write error: ', target,  err)\n        } else {\n            console.log(target, ' write success')\n        }\n    })\n}\nfunction appendFileToTarget(target: string, content: string) {\n    if (fs.existsSync(target)) {\n        const fileContent = fs.readFileSync(target, 'utf-8')\n        if (fileContent.indexOf(content.trim()) > -1) {\n            console.log(target, 'append content exists, ignore')\n            return\n        }\n    }\n    fs.appendFile(target, content, (err) => {\n        if (err) {\n            console.log('append error: ', target,  err)\n        } else {\n            console.log(target, ' append success')\n        }\n    })\n}\n\nfunction queryToObject(query: string) {\n    const setting = {}\n    if (query) {\n        const kvArray = query.split('&')\n        kvArray.forEach(kv => {\n            const [k, v] = kv.split('=')\n            if(k && v) {\n                setting[k] = v\n            }\n        })\n    }\n    return setting as Setting\n}\n\nfunction getConfig() {\n    return JSON.parse(fs.readFileSync(path.join(CONFIG_DIR, 'config.json')).toString()) as CodeGenConfig\n}\n\nfunction codeGenByDb(params: string[]) {\n    const config = getConfig()\n    let templateDir = 'default'\n    if (params[0].startsWith('template=')) {\n        templateDir = params.shift().split('=')[1]\n    }\n    const templatePath = path.join(CONFIG_DIR, templateDir)\n    params = params.map(param => {\n        return param.replace(/-/g, '_')\n    })\n    const readTableDefinePromise = TableDefineExplain(params, config.datasource)\n    const ejsTemplateMap = {}\n    const files = fs.readdirSync(templatePath)\n    files.forEach(file => {\n        if (file.endsWith('.ejs')) {\n            const absolutePath = path.join(templatePath, file)\n            const fileMateData = fs.readFileSync(absolutePath).toString()\n            let targetPath = fileMateData.substr(0, fileMateData.indexOf('\\n'))\n            if (targetPath.match(/#!.*\\..*/g)) {\n                targetPath = targetPath.substr(2).trim()\n                console.log('find template: ', file, ' -> ', targetPath)\n                const content = fileMateData.substr(fileMateData.indexOf('\\n') + 1)\n                ejsTemplateMap[targetPath] = {\n                    path: absolutePath,\n                    content,\n                }\n            }\n        }\n    })\n    readTableDefinePromise.then(modelTypeList => {\n        modelTypeList.forEach(model => {\n            Object.keys(ejsTemplateMap).forEach(targetPath => {\n                let parseTargetPath = ejs.render(targetPath, model)\n                const templateMap = ejsTemplateMap[targetPath]\n                writeFile(parseTargetPath, ejs.render(templateMap.content, model, {\n                    filename: templateMap.path\n                }))\n            })\n        })\n    }).catch((error) => {\n        console.log('render error ', error)\n    })\n}\n\nlet params = process.argv.slice(2)\ncodeGenByDb(params)\n"]}