{"version":3,"sources":["model/ModelType.ts","utils.ts","model/Field.ts","mysql-table-define-explain.ts","index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"..\\src","sourcesContent":["import { Field } from \"./Field\";\r\nexport class ModelType {\r\n    /** 根据表名转换的类型名称 `fs_user` -> `FsUser` */\r\n    typeName: string\r\n    /**  根据表名转换类型名称连字符模式 `fs_demo_table_string` -> `fs-demo-table-string` */\r\n    typeNameWithHyphen: string\r\n    /** 所有表字段 */\r\n    fields: Field[]\r\n    /** 目前和typeName一致 */\r\n    realType: string\r\n    /** 表名 */\r\n    tableName?: string\r\n    /** 主键名称 */\r\n    primaryKey?: string\r\n    /** 表备注 */\r\n    typeRemark?: string\r\n    constructor(typeName: string, fields: Field[] = []) {\r\n        this.typeName = typeName\r\n        this.realType = this.typeName\r\n        this.fields = fields\r\n    }\r\n}\r\n","export function javaTypeToJavaScript(type: string) {\r\n    const javaTypeMap = {\r\n        'integer': 'number',\r\n        'array': '[]',\r\n        'varchar': 'string',\r\n        'bigint': 'number',\r\n        'longtext': 'string',\r\n        'datetime': 'number',\r\n        'int': 'number',\r\n        'tinyint': 'number',\r\n        'decimal': 'number',\r\n        'double': 'number',\r\n        'smallint': 'number',\r\n        'bit': 'number',\r\n        'timestamp': 'number',\r\n        'text': 'string',\r\n        'char': 'string',\r\n        'blob': 'number',\r\n        'float': 'number',\r\n        'time': 'number',\r\n        'date': 'number',\r\n    }\r\n    return javaTypeMap[type] || 'string'\r\n}\r\n","import { javaTypeToJavaScript } from '../utils';\r\n\r\nexport class Field {\r\n    /** 字段名驼峰 test_field -> testField */\r\n    name: string\r\n    /** 字段类型(经过转换的javascript类型) */\r\n    type: string\r\n    /** 原始数据库类型 */\r\n    rawType: string\r\n    /** 字段备注 */\r\n    remark?: string\r\n    constructor(name: string, type: string, remark?: string) {\r\n        this.name = name\r\n        this.rawType = type\r\n        this.type = javaTypeToJavaScript(type)\r\n        this.remark = remark\r\n    }\r\n\r\n}\r\n","import { ModelType } from \"./model/ModelType\"\r\nimport { Field } from './model/Field'\r\nimport DataSourceConfig from \"./model/DataSourceConfig\"\r\nimport mysql, { RowDataPacket } from 'mysql'\r\nimport Connection = require(\"mysql/lib/Connection\")\r\n\r\ninterface TableInfoEntity {\r\n    tableName: string\r\n    tableRemark: string\r\n    primaryKey: string\r\n    fields: {key: string, type: string, remark: string}[]\r\n}\r\nlet connection: Connection\r\nasync function getTableDefine(tableName: string, dbConfig: DataSourceConfig) {\r\n    if (!connection) {\r\n        connection = mysql.createConnection(dbConfig)\r\n        connection.connect()\r\n    }\r\n    const p1 = executeQuery(`select table_name, table_comment from information_schema.tables where table_schema = ? and table_name = ? `, [dbConfig.database, tableName])\r\n    const p2 = executeQuery(`SELECT COLUMN_NAME, DATA_TYPE, COLUMN_COMMENT FROM information_schema.COLUMNS WHERE table_schema = ? AND table_name = ? ORDER BY ORDINAL_POSITION`, [dbConfig.database, tableName])\r\n    const p3 = executeQuery(`SELECT COLUMN_NAME FROM information_schema.KEY_COLUMN_USAGE WHERE table_schema = ? AND table_name = ? AND constraint_name = 'PRIMARY'`, [dbConfig.database, tableName])\r\n    const [tableDefine, columnDefine, primaryDefine] = await Promise.all([p1, p2, p3])\r\n    if (tableDefine.length === 0) {\r\n        throw `table ${tableName} no found`\r\n    }\r\n    const table = tableDefine[0]\r\n    \r\n    return {\r\n        tableName: table['TABLE_NAME'],\r\n        tableRemark: table['TABLE_COMMENT'],\r\n        primaryKey: primaryDefine[0]['COLUMN_NAME'],\r\n        fields: columnDefine.map(data => {\r\n            return {\r\n                key: data['COLUMN_NAME'],\r\n                type: data['DATA_TYPE'],\r\n                remark: data['COLUMN_COMMENT']\r\n            }\r\n        })\r\n    } as TableInfoEntity\r\n}\r\n\r\nasync function executeQuery(query: string, data: any[]): Promise<RowDataPacket[]> {\r\n    return new Promise((resolve) => {\r\n        connection.query<RowDataPacket[]>(query, data, (e, result) => {\r\n            resolve(result)\r\n        })\r\n    }) \r\n}\r\n\r\nfunction toCamelCase(source: string, split = '_') {\r\n    let array = source.split(split)\r\n    let output = array.map(m => m.substr(0, 1).toUpperCase() + m.substr(1)).join('')\r\n    return output\r\n}\r\n\r\nfunction fieldNameParse(source: string) {\r\n    return source.replace(/\\_(\\w)/g, (all, letter) => {\r\n        return letter.toUpperCase()\r\n    })\r\n}\r\n\r\n/**\r\n * 将表结构解析为 ModelType对象\r\n */\r\nexport default async (params: string[], dbConfig: DataSourceConfig): Promise<ModelType[]> => {\r\n    try {\r\n        const modelTypeList = []\r\n        for(let i = 0; i < params.length; i++) {\r\n            const table = params[i]\r\n            const data = await getTableDefine(table, dbConfig)\r\n            const modelName = toCamelCase(table)\r\n            const modelType = new ModelType(modelName, data.fields.map(field => {\r\n                return new Field(fieldNameParse(field.key), field.type, field.remark)\r\n            }))\r\n            modelType.typeRemark = data.tableRemark\r\n            modelType.tableName = table\r\n            modelType.typeNameWithHyphen = table.replace(/_/g, '-').toLocaleLowerCase()\r\n            modelType.primaryKey = data.primaryKey\r\n            modelTypeList.push(modelType)\r\n        }\r\n        return modelTypeList\r\n    } finally {\r\n        connection.end()\r\n    }\r\n}","#!/usr/bin/env node\n\nimport fs from 'fs'\nimport ejs from 'ejs'\nimport _path from 'path'\nimport TabelDefineExplain from './mysql-table-define-explain'\nimport DataSourceConfig from './model/DataSourceConfig'\nimport Setting from './model/Setting'\n\ninterface CodeGenConfig {\n    profile: {key: CodeGenConfig}\n    datasource: DataSourceConfig\n}\n\nconst CONFIG_DIR = resolve('.fast-codegen')\n\nfunction resolve(dir: string) {\n    return _path.join(process.cwd(), dir)\n}\n\nfunction mkdirs(dirname: string, callback: () => void){\n    fs.exists(dirname, exists => {\n        if(exists){\n            callback()\n        }else{\n            mkdirs(_path.dirname(dirname), () => {\n                fs.mkdir(dirname, callback)\n            })\n        }\n    })\n}\n/**\n * \n * @param target 目标目录\n * @param content 内容\n */\nfunction writeFile(target: string , content: string) {\n    let setting = {} as Setting\n    if (target.indexOf('?') > -1) {\n        const targetWithOption = target.split('?')\n        target = targetWithOption[0]\n        setting = queryToObject(targetWithOption[1]) \n    }\n    target = resolve(target)\n    \n    \n    const dirPath = target.substring(0, target.lastIndexOf('\\\\'))\n    mkdirs(dirPath, () => {\n        if (setting.mode) {\n            switch(setting.mode) {\n                case 'append': \n                    appendFileToTarget(target, content)\n                    break\n                case 'overwrite':\n                    if (fs.existsSync(target)) {\n                        fs.unlinkSync(target)\n                    }\n                    writeFileToTarget(target, content)\n                    break\n                default:\n                    const unknowSetting = setting.mode as never\n                    console.log('unkonwe setting mode', unknowSetting)\n                    break\n            }\n        } else {\n            if (fs.existsSync(target)) {\n                console.error(target, ' already exists')\n            } else {\n                writeFileToTarget(target, content)\n            }\n        }\n    })\n}\n\nfunction writeFileToTarget(target: string, content: string) {\n    fs.writeFile(target, content, (err) => {\n        if (err) {\n            console.log('write error: ', target,  err)\n        } else {\n            console.log(target, ' write success')\n        }            \n    })\n}\nfunction appendFileToTarget(target: string, content: string) {\n    if (fs.existsSync(target)) {\n        const fileContent = fs.readFileSync(target, 'utf-8')\n        if (fileContent.indexOf(content.trim()) > -1) {\n            console.log(target, 'append content exists, ignore')\n            return\n        }\n    }\n    fs.appendFile(target, content, (err) => {\n        if (err) {\n            console.log('append error: ', target,  err)\n        } else {\n            console.log(target, ' append success')\n        }\n    }) \n}\n\nfunction queryToObject(query: string) {\n    const setting = {}\n    if (query) {\n        const kvArray = query.split('&')\n        kvArray.forEach(kv => {\n            const [k, v] = kv.split('=')\n            if(k && v) {\n                setting[k] = v\n            }\n        })\n    }\n    return setting as Setting\n}\n\nfunction getConfig() {\n    return JSON.parse(fs.readFileSync(_path.join(CONFIG_DIR, 'config.json')).toString()) as CodeGenConfig\n}\n\nfunction codeGenByDb(params: string[]) {\n    const config = getConfig()\n    params = params.map(param => {\n        return param.replace(/-/g, '_')\n    })\n    const readTableDefinePromise = TabelDefineExplain(params, config.datasource)\n    const ejsTemplateMap = {}\n    const files = fs.readdirSync(CONFIG_DIR)\n    files.forEach(file => {\n        if (file.endsWith('.ejs')) {\n            const absolutePath = _path.join(CONFIG_DIR, file)\n            const fileMateData = fs.readFileSync(absolutePath).toString()\n            let targetPath = fileMateData.substr(0, fileMateData.indexOf('\\n'))\n            if (targetPath.match(/#!.*\\..*/g)) {\n                targetPath = targetPath.substr(2).trim()\n                console.log('find template: ', file, ' -> ', targetPath)\n                const content = fileMateData.substr(fileMateData.indexOf('\\n') + 1)\n                ejsTemplateMap[targetPath] = {\n                    path: absolutePath, \n                    content,\n                }\n            }\n        }\n    })\n    readTableDefinePromise.then(modelTypeList => {\n        modelTypeList.forEach(model => {\n            Object.keys(ejsTemplateMap).forEach(targetPath => {\n                let parseTargetPath = ejs.render(targetPath, model)\n                const templateMap = ejsTemplateMap[targetPath]\n                writeFile(parseTargetPath, ejs.render(templateMap.content, model, {\n                    filename: templateMap.path\n                }))\n            })\n        })\n    }).catch((error) => {\n        console.log('render error ', error)\n    })\n}\n\nlet params = process.argv.slice(2)\ncodeGenByDb(params)\n"]}